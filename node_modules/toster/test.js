import { BaseTest } from './base-test';
import { TestFailStatus, TestTimeoutStatus, SUCCESS, SKIP, NOT_EXECUTED } from './test-status';
import { runCallback } from './util';

export class Test extends BaseTest {
  constructor(opts = {}) {
    let testFunction = typeof opts.testFunction === 'function' ? opts.testFunction : null;
    if((!opts.initialStatus || opts.initialStatus === NOT_EXECUTED) && !testFunction) {
      opts.initialStatus = SKIP;
    }
    super(opts);

    this._testFunction = testFunction;
    this._timeout = opts.timeout || 5000;
  }

  testFunction() {
    return this._testFunction;
  }

  _run() {
    let timeout = new Promise((resolve) => setTimeout(resolve, this._timeout))
      .then(() => this._setStatusAsync(new TestTimeoutStatus(this._timeout)));


    let setStatus = runCallback(this._testFunction, this._state)
      .then(
        () => this._setStatusAsync(SUCCESS),
        (err) => this._setStatusAsync(new TestFailStatus(err))
      );

    return Promise.race([timeout, setStatus])
      .then(() => {
        return this._status;
      });
  }
}
