'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestTree = undefined;

var _suite = require('./suite');

var _test2 = require('./test');

var _emitter = require('./emitter');

var _testStatus = require('./test-status');

class TestTree extends _emitter.Emitter {
  constructor() {
    super();

    this._root = new _suite.Suite({ initialStatus: _testStatus.NOT_EXECUTED });
    this._lastSuite = this._root;

    this._running = false;
  }

  add(testType, _test) {
    this._lastSuite.add(_test);
    this.emit(`add ${ testType }`, _test);
  }

  addTest(name, func, status) {
    this.add('test', new _test2.Test({ testFunction: func, title: name, initialStatus: status || this._lastSuite.status() }));
  }

  addSuite(name, func, status) {
    let s = new _suite.Suite({ title: name, initialStatus: status || this._lastSuite.status() });
    let prevSuite = this._lastSuite;
    this._lastSuite = s;
    func();
    this._lastSuite = prevSuite;

    this.add('suite', s);
  }

  addBeforeTestCallback(func) {
    this._lastSuite.addBeforeTestCallback(func);
  }

  addAfterTestCallback(func) {
    this._lastSuite.addAfterTestCallback(func);
  }

  addBeforeCallback(func) {
    this._lastSuite.addBeforeCallback(func);
  }

  addAfterCallback(func) {
    this._lastSuite.addAfterCallback(func);
  }

  run() {
    this._running = true;
    return this._root.run();
  }

  running() {
    return this._running;
  }
}
exports.TestTree = TestTree;