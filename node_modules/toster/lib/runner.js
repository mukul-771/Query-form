'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Runner = undefined;

var _tree = require('./tree');

var _emitter = require('./emitter');

class Runner extends _emitter.Emitter {
  constructor() {
    super();

    this._defaultTree = new _tree.TestTree();
    this._onlyTree = new _tree.TestTree();

    this._runOnly = false;

    this._setCallbacks(this._defaultTree);
    this._setCallbacks(this._onlyTree);

    this._running = false;
  }

  _setRunOnly() {
    this._runOnly = true;
  }

  _setCallbacks(tree) {
    ['test', 'suite'].forEach(testType => {
      tree.on(`add ${ testType }`, _test => {
        ['start', 'end'].forEach(eventName => {
          _test.on(eventName, () => {
            if (tree.running()) {
              this.emit(`${ eventName } ${ testType }`, _test);
            }
          });
        });
      });
    });
  }

  _uncaughtErrorHandler(err) {
    this.emit('uncaughtError', err);
  }

  _run() {
    this.emit('start');
    let result = this._runOnly ? this._onlyTree.run() : this._defaultTree.run();

    return result.then(() => {
      this.emit('end');
    });
  }

  run() {
    if (!this._running) {
      this._running = true;
      setImmediate(() => this._run());
    }
  }

  addTest(name, func, status) {
    this._defaultTree.addTest(name, func, status);
    if (this._currentSuiteOnly) {
      this._onlyTree.addTest(name, func, status);
    }
    this.run();
  }

  addSuite(name, func) {
    this._defaultTree.addSuite(name, func);
    if (this._currentSuiteOnly) {
      this._onlyTree.addSuite(name, func);
    }
    this.run();
  }

  addBeforeTestCallback(func) {
    this._defaultTree.addBeforeTestCallback(func);
    this._onlyTree.addBeforeTestCallback(func);
  }

  addAfterTestCallback(func) {
    this._defaultTree.addAfterTestCallback(func);
    this._onlyTree.addAfterTestCallback(func);
  }

  addBeforeCallback(func) {
    this._defaultTree.addBeforeCallback(func);
    this._onlyTree.addBeforeCallback(func);
  }

  addAfterCallback(func) {
    this._defaultTree.addAfterCallback(func);
    this._onlyTree.addAfterCallback(func);
  }

  addTestOnly(name, func) {
    this._setRunOnly();
    this._onlyTree.addTest(name, func);
    this.run();
  }

  addSuiteOnly(name, func) {
    this._setRunOnly();
    this._currentSuiteOnly = true;
    this._onlyTree.addSuite(name, func);
    this._currentSuiteOnly = false;
    this.run();
  }
}
exports.Runner = Runner;