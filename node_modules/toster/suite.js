import { BaseTest } from './base-test';
import { SKIP, SUCCESS, SUITE_FAIL } from './test-status';
import { callFunction } from './util';

export class Suite extends BaseTest {
  constructor(opts = {}) {
    super(opts);

    this._tests = [];
    this._index = 0;

    this._beforeTestCallbacks = [];
    this._afterTestCallbacks = [];
  }

  add(t) {
    this._beforeTestCallbacks.forEach(f => t.addBeforeCallback(f));
    this._afterTestCallbacks.forEach(f => t.addAfterCallback(f));

    this._tests.push(t);
    return this;
  }

  addBeforeTestCallback(f) {
    this._beforeTestCallbacks.push(f);
    return this;
  }

  addAfterTestCallback(f) {
    this._afterTestCallbacks.push(f);
    return this;
  }

  _onSkip() {
    // run tests even if skipped to emit events on tests
    return this._run();
  }

  _run() {
    return callFunction(this._tests, 'run')
      .then(() => {
        let stat = this._tests.reduce((acc, t) => {
          let statusName = t.status().name;
          acc[statusName] = (acc[statusName] || 0) + 1;
          return acc;
        }, {});

        let statuses = Object.keys(stat);
        if(statuses.length === 0)
          return this._setStatusAsync(SKIP);

        if((stat.FAIL || 0) > 0 || (stat.TIMEOUT || 0) > 0)
          return this._setStatusAsync(SUITE_FAIL);

        if(statuses.length === 1) {
          return this._setStatusAsync(this._tests[0].status());
        }

        return this._setStatusAsync(SUCCESS);
      });
  }
}
